defmodule Tabular.TestSupport do
  @moduledoc """
  Functions to simplify testing with ascii tables.

  `compare/2` compares two ascii tables, producing a
  matrix of the individual comparisons. `equal?/1`
  examines the matrix generated by `compare/2` and
  returns true if all cells are true and false
  otherwise.
  """

  @doc ~S'''

  Compares two ascii tables producing a matrix of
  individual cell comparison results. Optional
  comparator functions can be provided.

  ## Examples

      iex> table1 = """
      ...>   +---------+-------+
      ...>   | name    | count |
      ...>   +---------+-------+
      ...>   | Malcolm | 10    |
      ...>   +---------+-------+
      ...>   | Zoe     | 5     |
      ...>   +---------+-------+
      ...> """
      ...>
      ...> table2 = """
      ...>   +---------+-------+
      ...>   | name    | count |
      ...>   +---------+-------+
      ...>   | Mike    | 11    |
      ...>   +---------+-------+
      ...>   | Zoe     | 20    |
      ...>   +---------+-------+
      ...> """
      ...>
      ...> comparators = %{"count" => &(abs(String.to_integer(&1) - String.to_integer(&2)) < 2)}
      ...>
      ...> Tabular.TestSupport.compare(table1, table2, comparators: comparators)
      [
        [false, true],
        [true, false]
      ]
  '''

  def compare(actual_table, expected_table, opts \\ [comparators: %{}]) do
    actual_table_data = actual_table |> Tabular.to_list_of_lists()
    expected_table_data = expected_table |> Tabular.to_list_of_lists()

    [actual_headers | actual_table_rows] = actual_table_data
    [expected_header_row | expected_table_rows] = expected_table_data

    [actual_headers] ++
      (Enum.zip(actual_table_rows, expected_table_rows)
       |> Enum.map(fn {actual_row, expected_row} ->
         Enum.zip([expected_header_row, actual_row, expected_row])
         |> Enum.map(fn {header, actual_value, expected_value} ->
           match? =
             case opts[:comparators][header] do
               nil -> actual_value == expected_value
               comparator -> comparator.(actual_value, expected_value)
             end

           case match? do
             true -> actual_value
             false -> {actual_value, expected_value}
           end
         end)
       end))
  end

  @doc ~S'''

  Examines the matrix produced by `compare/2`. Returns false
  if any cell is false. Otherwise returns true.

  ## Examples

      iex> results_table = [
      ...>   [true, true, true],
      ...>   [true, false, true],
      ...>   [true, true, true]
      ...> ]
      ...>
      ...> Tabular.TestSupport.equal?(results_table)
      false
  '''

  def equal?(compare_result) do
    Enum.all?(compare_result, fn row ->
      Enum.all?(row, fn
        {_, _} -> false
        _ -> true
      end)
    end)
  end

  def assert_equal(results_table) do
    if equal?(results_table) do
      true
    else
      generate_error_message(results_table)
      |> ExUnit.Assertions.flunk()
    end
  end

  def generate_error_message([header | body]) do
    format_cells(body) |> TableRex.quick_render!(header)
  end

  def format_cells(results_table) do
    Enum.map(results_table, fn row ->
      Enum.map(row, fn
        {left, right} -> ">>> #{left} <=> #{right} <<<"
        cell -> cell
      end)
    end)
  end
end
